package by.epam.selection.dao.jdbc.template;

import by.epam.selection.dao.connection.holder.ConnectionHolder;
import by.epam.selection.dao.exception.DaoException;
import by.epam.selection.dao.jdbc.template.extractor.ListResultSetExtractor;
import by.epam.selection.dao.jdbc.template.extractor.ResultSetExtractor;
import by.epam.selection.dao.jdbc.template.extractor.SingleRowResultSetExtractor;
import by.epam.selection.dao.jdbc.template.mapper.RowMapper;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

/**
 * Specifying a basic set of JDBC operations. Base class for DAO implementation. *
 *
 * @author Alex Aksionchik 12/13/2017
 * @version 1.0
 */
public class JdbcTemplate {

    private static final Logger logger = LogManager.getLogger(JdbcTemplate.class);

    private ConnectionHolder connectionHolder;

    public JdbcTemplate(ConnectionHolder connectionHolder) {
        this.connectionHolder = connectionHolder;
    }

    /**
     * Issue a single SQL insert operation via a prepared statement,
     * binding the given arguments.
     *
     * @param sql    - SQL query to execute
     * @param values - arguments to bind to the query
     * @return the AutoGenerated ID in database
     * @throws DaoException - if there is any problem issuing the insert
     */
    public Long save(String sql, Object... values) throws DaoException {
        Long id = null;

        Connection conn = connectionHolder.getConnection();
        try (PreparedStatement statement = getPreparedStatement(conn, sql, true, values)) {
            int affectedRows = statement.executeUpdate();
            if (affectedRows == 0) {
                throw new DaoException("Operation failed, no rows affected.");
            }
            try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    id = generatedKeys.getLong(1);
                }
            }
        } catch (SQLException e) {
            throw new DaoException(e.getMessage(), e);
        } finally {
            release(conn);
        }
        return id;
    }

    /**
     * Issue a single SQL update operation (such as an insert, update or delete statement) via a prepared statement,
     * binding the given arguments.
     *
     * @param sql    - SQL query to execute
     * @param values - arguments to bind to the query
     * @return the number of rows affected
     * @throws DaoException - if there is any problem issuing the update
     */
    public int update(String sql, Object... values) throws DaoException {
        int affectedRows;

        Connection conn = connectionHolder.getConnection();
        try (PreparedStatement statement = getPreparedStatement(conn, sql, false, values)) {
            affectedRows = statement.executeUpdate();
            if (affectedRows == 0) {
                throw new DaoException("Operation failed, no rows affected.");
            }
        } catch (SQLException e) {
            throw new DaoException(e.getMessage(), e);
        } finally {
            release(conn);
        }
        return affectedRows;
    }

    /**
     * Query given SQL to create a prepared statement from SQL and a list of arguments to bind to the query,
     * reading the ResultSet with a ResultSetExtractor.
     *
     * @param sql                - SQL query to execute
     * @param resultSetExtractor - object that will extract results
     * @param values             - arguments to bind to the query
     * @return an arbitrary result object, as returned by the ResultSetExtractor or null
     * @throws DaoException - if the query fails
     */
    public <T> T query(String sql, ResultSetExtractor<T> resultSetExtractor, Object... values) throws DaoException {
        T obj;

        Connection conn = connectionHolder.getConnection();
        try (PreparedStatement statement = getPreparedStatement(conn, sql, false, values);
             ResultSet rs = statement.executeQuery()) {
            obj = resultSetExtractor.extractData(rs);
        } catch (SQLException e) {
            throw new DaoException(e);
        } finally {
            release(conn);
        }
        return obj;
    }

    /**
     * Query given SQL to create a prepared statement from SQL and a list of arguments to bind to the query, expecting a result list.
     * <p>
     * The results will be mapped to a List (one entry for each row) of result objects, each of them matching the specified element type.
     *
     * @param sql       - SQL query to execute
     * @param rowMapper - object that will extract entity from ResultSet
     * @param values    - arguments to bind to the query
     * @return a List of objects, as returned by the RowMapper or empty List
     * @throws DaoException - if the query fails
     */
    public <T> List<T> queryForList(String sql, RowMapper<T> rowMapper, Object... values) throws DaoException {
        return query(sql, new ListResultSetExtractor<>(rowMapper), values);
    }

    /**
     * Query given SQL to create a prepared statement from SQL and a list of arguments to bind to the query, expecting a result object.
     * The query is expected to be a single row/single column query; the returned result will be directly mapped to the corresponding
     * object type.
     *
     * @param sql       - SQL query to execute
     * @param rowMapper - object that will extract entity from ResultSet
     * @param values    - arguments to bind to the query
     * @return the result object of the required type, or null
     * @throws DaoException - if the query fails
     */
    public <T> T queryForObject(String sql, RowMapper<T> rowMapper, Object... values) throws DaoException {
        return query(sql, new SingleRowResultSetExtractor<>(rowMapper), values);
    }

    /**
     * Build PreparedStatement object
     *
     * @param connection      to the database
     * @param sql             an SQL statement that may contain one or more '?' IN parameter placeholders
     * @param isGeneratedKeys a flag indicating whether auto-generated keys should be returned
     * @param values          that should be used in sql statement as parameters
     * @return a new PreparedStatement object, containing the pre-compiled SQL statement, that will have the capability of returning auto-generated keys
     * @throws SQLException if a database access error occurs, this method is called on a closed connection or the given
     *                      parameter is not a Statement constant indicating whether auto-generated keys should be returned
     */
    private PreparedStatement getPreparedStatement(Connection connection, String sql, boolean isGeneratedKeys, Object[] values) throws SQLException {
        int returnGeneratedKeys = isGeneratedKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
        PreparedStatement statement = connection.prepareStatement(sql, returnGeneratedKeys);
        for (int i = 0; i < values.length; i++) {
            statement.setObject(i + 1, values[i]);
        }
        return statement;
    }

    /**
     * Release connection and return it to the pool
     *
     * @param connection that should be released
     * @throws DaoException - if any exception occur while closing connection
     */
    private void release(Connection connection) throws DaoException {
        try {
            if (connection != null && connection.getAutoCommit()) {
                connectionHolder.close();
            }
        } catch (SQLException e) {
            logger.warn(e.getMessage());
        }
    }

}
