package by.epam.selection.dao.template;

import by.epam.selection.dao.exception.DaoException;
import by.epam.selection.dao.template.extractor.ResultSetExtractor;
import by.epam.selection.dao.template.mapper.RowMapper;

import java.util.List;

/**
 * Interface specifying a basic set of JDBC operations.
 *
 * @author Alex Aksionchik 12/15/2017
 * @version 1.0
 */
public interface JdbcOperation {

    /**
     * Issue a single SQL insert operation via a prepared statement,
     * binding the given arguments.
     *
     * @param sql    - SQL query to execute
     * @param values - arguments to bind to the query
     * @return the AutoGenerated ID in database
     * @throws DaoException - if there is any problem issuing the insert
     */
    Long save(String sql, Object... values) throws DaoException;

    /**
     * Issue a single SQL update operation (such as an insert, update or delete statement) via a prepared statement,
     * binding the given arguments.
     *
     * @param sql    - SQL query to execute
     * @param values - arguments to bind to the query
     * @return the number of rows affected
     * @throws DaoException - if there is any problem issuing the update
     */
    int update(String sql, Object... values) throws DaoException;

    /**
     * Query given SQL to create a prepared statement from SQL and a list of arguments to bind to the query,
     * reading the ResultSet with a ResultSetExtractor.
     *
     * @param sql                - SQL query to execute
     * @param resultSetExtractor - object that will extract results
     * @param values             - arguments to bind to the query
     * @return an arbitrary result object, as returned by the ResultSetExtractor or null
     * @throws DaoException - if the query fails
     */
    <T> T query(String sql, ResultSetExtractor<T> resultSetExtractor, Object... values) throws DaoException;

    /**
     * Query given SQL to create a prepared statement from SQL and a list of arguments to bind to the query, expecting a result list.
     * <p>
     * The results will be mapped to a List (one entry for each row) of result objects, each of them matching the specified element type.
     *
     * @param sql       - SQL query to execute
     * @param rowMapper - object that will extract entity from ResultSet
     * @param values    - arguments to bind to the query
     * @return a List of objects, as returned by the RowMapper or empty List
     * @throws DaoException - if the query fails
     */
    <T> List<T> queryForList(String sql, RowMapper<T> rowMapper, Object... values) throws DaoException;

    /**
     * Query given SQL to create a prepared statement from SQL and a list of arguments to bind to the query, expecting a result object.
     * The query is expected to be a single row/single column query; the returned result will be directly mapped to the corresponding
     * object type.
     *
     * @param sql       - SQL query to execute
     * @param rowMapper - object that will extract entity from ResultSet
     * @param values    - arguments to bind to the query
     * @return the result object of the required type, or null
     * @throws DaoException - if the query fails
     */
    <T> T queryForObject(String sql, RowMapper<T> rowMapper, Object... values) throws DaoException;

}
